{
  "version": 3,
  "sources": ["../Client/src/index.ts"],
  "sourcesContent": ["import * as signalR from \"@microsoft/signalr\";\nimport { DOMCommand, Id, isAppendChild, isCreateElement, isCreateTextNode, isInsertBefore, isRemoveAttribute, isRemoveCallback, isRemoveChild, isSetBooleanAttribute, isSetNumberAttribute, isSetStringAttribute, isSetTextNodeValue, isSetVoidCallback } from \"./DOMCommands\";\n\nconst location = window.location;\nlet hubUri = `${location.protocol === \"https:\" ? \"wss:\" : \"ws:\"}//${location.host}${location.pathname}counter/123`;\nconst socket = new WebSocket(hubUri);\n\nsocket.addEventListener(\"open\", event => {\n    socket.send(JSON.stringify([\"Hello\"]));\n});\n\nsocket.addEventListener(\"message\", event => {\n    console.log(event.data);\n});\n\n// const connection = new signalR.HubConnectionBuilder()\n//     .withUrl(\"/exprazorhub\")\n//     .withAutomaticReconnect()\n//     .build();\n\n// const idToElement: Map<Id, Node> = new Map();\n// const elementToId : Map<Node, Id> = new Map();\n\n// const MOUNT_ID = -1;\n// idToElement[MOUNT_ID] = document.querySelector(\"body\");\n// elementToId[idToElement[MOUNT_ID]] = MOUNT_ID;\n\n// connection.on(\"handleCommands\", (commands) => {\n//     commands.forEach(cmd => {\n//         if (isSetStringAttribute(cmd)) {\n//             (idToElement.get(cmd.Id) as HTMLElement).setAttribute(cmd.Key, cmd.Value);\n//         } else if (isSetNumberAttribute(cmd)) {\n//             (idToElement.get(cmd.Id) as HTMLElement).setAttribute(cmd.Key, cmd.Value.toString());\n//         } else if (isSetBooleanAttribute(cmd)) {\n//             if (cmd.Value) {\n//                 (idToElement.get(cmd.Id) as HTMLElement).setAttribute(cmd.Key, \"\");\n//             } else {\n//                 (idToElement.get(cmd.Id) as HTMLElement).removeAttribute(cmd.Key);\n//             }\n//         } else if (isRemoveAttribute(cmd)) {\n//             (idToElement.get(cmd.Id) as HTMLElement).removeAttribute(cmd.Key);\n//         } else if (isSetVoidCallback(cmd)) {\n//             switch (cmd.Key) {\n//                 // Only support void callback for now.\n//                 default:\n//                     idToElement.get(cmd.Id)[cmd.Key] = connection.send(\"InvokeVoid\", cmd.Id, cmd.Key);\n//                     break;\n//             }\n//         } else if (isRemoveCallback(cmd)) {\n//             idToElement.get(cmd.Id)[cmd.Key] = null;\n//         } else if (isCreateTextNode(cmd)) {\n//             const newNode = document.createTextNode(cmd.Text);\n//             idToElement.set(cmd.Id, newNode);\n//             elementToId.set(newNode, cmd.Id);\n//         } else if (isCreateElement(cmd)) {\n//             const newNode = document.createElement(cmd.Tag);\n//             idToElement.set(cmd.Id, newNode);\n//             elementToId.set(newNode, cmd.Id);\n//         } else if (isAppendChild(cmd)) {\n//             idToElement.get(cmd.ParentId).appendChild(idToElement.get(cmd.NewId));\n//         } else if(isSetTextNodeValue(cmd)) {\n//             (idToElement.get(cmd.Id) as Text).textContent = cmd.Text;\n//         } else if(isInsertBefore(cmd)) {\n//             idToElement.get(cmd.ParentId).insertBefore(idToElement.get(cmd.NewId), idToElement.get(cmd.BeforeId));\n//         } else if(isRemoveChild(cmd)) {\n//             const childToRemove = idToElement.get(cmd.ChildId);\n//             if(childToRemove instanceof HTMLElement) {\n//                 // remove all child from map to prevent memory leak.\n//                 for(const child of childToRemove.querySelectorAll(\"*\")) {\n//                     var id = elementToId.get(child);\n//                     idToElement.delete(id);\n//                     elementToId.delete(child);\n//                 }\n//             }\n//             idToElement[cmd.ParentId].removeChild(childToRemove);\n//         }\n//     });\n// });"],
  "mappings": "MAGA,GAAM,GAAW,OAAO,SACpB,EAAS,GAAG,EAAS,WAAa,SAAW,OAAS,UAAU,EAAS,OAAO,EAAS,sBACvF,EAAS,GAAI,WAAU,GAE7B,EAAO,iBAAiB,OAAQ,GAAS,CACrC,EAAO,KAAK,KAAK,UAAU,CAAC,aAGhC,EAAO,iBAAiB,UAAW,GAAS,CACxC,QAAQ,IAAI,EAAM",
  "names": []
}
