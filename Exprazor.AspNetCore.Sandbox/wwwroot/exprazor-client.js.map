{
  "version": 3,
  "sources": ["../Client/src/ClientCommand.ts", "../Client/src/DOMCommands.ts", "../Client/src/index.ts"],
  "sourcesContent": ["import { DOMCommand } from \"./DOMCommands\";\r\n\r\ndeclare var __DEV__ : any;\r\n\r\n// This type will be union type later.\r\nexport type ClientCommand = HandleCommands;\r\n\r\nexport type HandleCommands = {\r\n    Commands: DOMCommand[]\r\n}\r\n\r\nfunction isHandleCommandsProd(value: any) : value is HandleCommands {\r\n    return value.Type === 0;\r\n}\r\n\r\nfunction isHandleCommandsDev(value : any) : value is HandleCommands {\r\n    return value.Type === \"HandleCommands\";\r\n}\r\n\r\nexport const isHandleCommands : (value : any) => value is HandleCommands = __DEV__ ? isHandleCommandsDev : isHandleCommandsProd;", "import { getIsDevelopment } from \"./Utils\";\n\ndeclare var __DEV__ : any;\n\nexport type Id = number;\n\nexport type DOMCommand = \n    SetNumberAttribute  |\n    SetNumberAttribute  |\n    SetBooleanAttribute |\n    RemoveAttribute     |\n    SetVoidCallback     |\n    RemoveCallback      |\n    CreateTextNode      |\n    CreateElement       |\n    AppendChild         |\n    SetTextNodeValue    |\n    InsertBefore        |\n    RemoveChild\n    ;\n\nexport type SetStringAttribute = {\n    Id: Id,\n    Key: string,\n    Value: string\n}\n\nexport type SetNumberAttribute = {\n    Id: Id,\n    Key: string,\n    Value: number\n}\n\nexport type SetBooleanAttribute = {\n    Id:Id,\n    Key: string,\n    Value: boolean\n}\n\nexport type RemoveAttribute = {\n    Id: Id,\n    Key: string\n}\n\nexport type SetVoidCallback = {\n    Id: Id,\n    Key: string,\n}\n\nexport type RemoveCallback = {\n    Id: Id,\n    Key: string,\n}\n\nexport type CreateTextNode = {\n    Id: Id,\n    Text: string\n}\n\nexport type CreateElement = {\n    Id: Id,\n    Tag: string\n}\n\nexport type AppendChild = {\n    ParentId: Id,\n    NewId: Id,\n}\n\nexport type SetTextNodeValue = {\n    Id: Id,\n    Text: string\n}\n\nexport type InsertBefore = {\n    ParentId: Id,\n    NewId: Id,\n    BeforeId: Id\n}\n\nexport type RemoveChild = {\n    ParentId: Id,\n    ChildId: Id\n}\n\nfunction isDOMCommandCore(value: any, type_dev: string, type_prod: number) {\n    if(window[\"EXPRAZOR_DEV\"]) {\n        return value.Type == type_dev;\n    }\n\n    return value.Type == type_prod;\n}\n\nfunction isSetStringAttributeProd(value: any) : value is SetStringAttribute {\n    return value.Type === 1;\n}\nfunction isSetStringAttributeDev(value:any) : value is SetStringAttribute {\n    return value.Type === \"SetStringAttribute\"\n}\nexport const isSetStringAttribute : (value:any) => value is SetStringAttribute = (__DEV__ ? isSetStringAttributeDev : isSetStringAttributeProd);\n\nfunction isSetNumberAttributeProd(value: any) : value is SetNumberAttribute {\n    return value.Type === 2;\n}\nfunction isSetNumberAttributeDev(value:any) : value is SetNumberAttribute {\n    return value.Type === \"SetNumberAttribute\"\n}\nexport const isSetNumberAttribute : (value:any) => value is SetNumberAttribute = (__DEV__ ? isSetNumberAttributeDev : isSetNumberAttributeProd);\n\n\nfunction isSetBooleanAttributeProd(value: any) : value is SetBooleanAttribute {\n    return value.Type === 3;\n}\nfunction isSetBooleanAttributeDev(value:any) : value is SetBooleanAttribute {\n    return value.Type === \"SetBooleanAttribute\"\n}\nexport const isSetBooleanAttribute : (value:any) => value is SetBooleanAttribute = (__DEV__ ? isSetBooleanAttributeDev : isSetBooleanAttributeProd);\n\n\nfunction isRemoveAttributeProd(value: any) : value is RemoveAttribute {\n    return value.Type === 4;\n}\nfunction isRemoveAttributeDev(value:any) : value is RemoveAttribute {\n    return value.Type === \"RemoveAttribute\"\n}\nexport const isRemoveAttribute : (value:any) => value is RemoveAttribute = (__DEV__ ? isRemoveAttributeDev : isRemoveAttributeProd);\n\n\n\nfunction isSetVoidCallbackProd(value: any) : value is SetVoidCallback {\n    return value.Type === 5;\n}\nfunction isSetVoidCallbackDev(value:any) : value is SetVoidCallback {\n    return value.Type === \"SetVoidCallback\"\n}\nexport const isSetVoidCallback : (value:any) => value is SetVoidCallback = (__DEV__ ? isSetVoidCallbackDev : isSetVoidCallbackProd);\n\n\n\nfunction isRemoveCallbackProd(value: any) : value is RemoveCallback {\n    return value.Type === 6;\n}\nfunction isRemoveCallbackDev(value:any) : value is RemoveCallback {\n    return value.Type === \"RemoveCallback\"\n}\nexport const isRemoveCallback : (value:any) => value is RemoveCallback = (__DEV__ ? isRemoveCallbackDev : isRemoveCallbackProd);\n\n\n\nfunction isCreateTextNodeProd(value: any) : value is CreateTextNode {\n    return value.Type === 7;\n}\nfunction isCreateTextNodeDev(value:any) : value is CreateTextNode {\n    return value.Type === \"CreateTextNode\"\n}\nexport const isCreateTextNode : (value:any) => value is CreateTextNode = (__DEV__ ? isCreateTextNodeDev : isCreateTextNodeProd);\n\n\n\nfunction isCreateElementProd(value: any) : value is CreateElement {\n    return value.Type === 8;\n}\nfunction isCreateElementDev(value:any) : value is CreateElement {\n    return value.Type === \"CreateElement\"\n}\nexport const isCreateElement : (value:any) => value is CreateElement = (__DEV__ ? isCreateElementDev : isCreateElementProd);\n\n\nfunction isAppendChildProd(value: any) : value is AppendChild {\n    return value.Type === 9;\n}\nfunction isAppendChildDev(value:any) : value is AppendChild {\n    return value.Type === \"AppendChild\"\n}\nexport const isAppendChild : (value:any) => value is AppendChild = (__DEV__ ? isAppendChildDev : isAppendChildProd);\n\n\n\nfunction isSetTextNodeValueProd(value: any) : value is SetTextNodeValue {\n    return value.Type === 10;\n}\nfunction isSetTextNodeValueDev(value:any) : value is SetTextNodeValue {\n    return value.Type === \"SetTextNodeValue\"\n}\nexport const isSetTextNodeValue : (value:any) => value is SetTextNodeValue = (__DEV__ ? isSetTextNodeValueDev : isSetTextNodeValueProd);\n\n\nfunction isInsertBeforeProd(value: any) : value is InsertBefore {\n    return value.Type === 11;\n}\nfunction isInsertBeforeDev(value:any) : value is InsertBefore {\n    return value.Type === \"InsertBefore\"\n}\nexport const isInsertBefore : (value:any) => value is InsertBefore = (__DEV__ ? isInsertBeforeDev : isInsertBeforeProd);\n\n\nfunction isRemoveChildProd(value: any) : value is RemoveChild {\n    return value.Type === 12;\n}\nfunction isRemoveChildDev(value:any) : value is RemoveChild {\n    return value.Type === \"RemoveChild\"\n}\nexport const isRemoveChild : (value:any) => value is RemoveChild = (__DEV__ ? isRemoveChildDev : isRemoveChildProd);\n\n\n\n// export function isSetNumberAttribute(value : any) : value is SetNumberAttribute {\n//     return isDOMCommandCore(value, \"SetNumberAttribute\", 2);\n// }\n// export function isSetBooleanAttribute(value : any) : value is SetBooleanAttribute {\n//     return isDOMCommandCore(value, \"SetBooleanAttribute\", 3);\n// }\n// export function isRemoveAttribute(value: any) : value is RemoveAttribute {\n//     return isDOMCommandCore(value, \"RemoveAttribute\", 4);\n// }\n// export function isSetVoidCallback(value:any): value is SetVoidCallback {\n//     return isDOMCommandCore(value, \"SetVoidCallback\", 5);\n// }\n// export function isRemoveCallback(value: any):value is RemoveCallback {\n//     return isDOMCommandCore(value, \"RemoveCallback\", 6);\n// }\n// export function isCreateTextNode(value:any):value is CreateTextNode {\n//     return isDOMCommandCore(value, \"CreateTextNode\", 7);\n// }\n// export function isCreateElement(value:any):value is CreateElement {\n//     return isDOMCommandCore(value, \"CreateElement\", 8);\n// }\n// export function isAppendChild(value:any):value is AppendChild {\n//     return isDOMCommandCore(value, \"AppendChild\", 9 );\n// }\n// export function isSetTextNodeValue(value:any): value is SetTextNodeValue {\n//     return isDOMCommandCore(value, \"SetTextNodeValue\", 10);\n// }\n// export function isInsertBefore(value:any):value is InsertBefore {\n//     return isDOMCommandCore(value, \"InsertBefore\", 11);\n// }\n// export function isRemoveChild(value:any):value is RemoveChild {\n//     return isDOMCommandCore(value, \"RemoveChild\", 12);\n// }", "import { isHandleCommands } from \"./ClientCommand\";\nimport { DOMCommand, Id, isAppendChild, isCreateElement, isCreateTextNode, isInsertBefore, isRemoveAttribute, isRemoveCallback, isRemoveChild, isSetBooleanAttribute, isSetNumberAttribute, isSetStringAttribute, isSetTextNodeValue, isSetVoidCallback } from \"./DOMCommands\";\n\ndeclare var __DEV__ : any;\n\nconst idToElement: Map<Id, Node> = new Map();\nconst elementToId : Map<Node, Id> = new Map();\n\nconst MOUNT_ID = -1;\nidToElement[MOUNT_ID] = document.querySelector(\"body\");\nelementToId[idToElement[MOUNT_ID]] = MOUNT_ID;\n\n\nconst location = window.location;\nlet hubUri = `${location.protocol === \"https:\" ? \"wss:\" : \"ws:\"}//${location.host}${location.pathname}counter/123`;\nconst socket = new WebSocket(hubUri);\n\nsocket.addEventListener(\"open\", event => {\n    socket.send(JSON.stringify([\"Hello\"]));\n});\n\nsocket.addEventListener(\"message\", event => {\n    if(isHandleCommands(event.data)) {\n        event.data.Commands.forEach(cmd => {\n            if (isSetStringAttribute(cmd)) {\n                (idToElement.get(cmd.Id) as HTMLElement).setAttribute(cmd.Key, cmd.Value);\n            } else if (isSetNumberAttribute(cmd)) {\n                (idToElement.get(cmd.Id) as HTMLElement).setAttribute(cmd.Key, cmd.Value.toString());\n            } else if (isSetBooleanAttribute(cmd)) {\n                if (cmd.Value) {\n                    (idToElement.get(cmd.Id) as HTMLElement).setAttribute(cmd.Key, \"\");\n                } else {\n                    (idToElement.get(cmd.Id) as HTMLElement).removeAttribute(cmd.Key);\n                }\n            } else if (isRemoveAttribute(cmd)) {\n                (idToElement.get(cmd.Id) as HTMLElement).removeAttribute(cmd.Key);\n            } else if (isSetVoidCallback(cmd)) {\n                switch (cmd.Key) {\n                    // Only support void callback for now.\n                    default:\n                        var type = __DEV__ ? \"invokeVoid\" : 1;\n                        idToElement.get(cmd.Id)[cmd.Key] = () => socket.send(JSON.stringify([type, cmd.Id, cmd.Key]));\n                        break;\n                }\n            } else if (isRemoveCallback(cmd)) {\n                idToElement.get(cmd.Id)[cmd.Key] = null;\n            } else if (isCreateTextNode(cmd)) {\n                const newNode = document.createTextNode(cmd.Text);\n                idToElement.set(cmd.Id, newNode);\n                elementToId.set(newNode, cmd.Id);\n            } else if (isCreateElement(cmd)) {\n                const newNode = document.createElement(cmd.Tag);\n                idToElement.set(cmd.Id, newNode);\n                elementToId.set(newNode, cmd.Id);\n            } else if (isAppendChild(cmd)) {\n                idToElement.get(cmd.ParentId).appendChild(idToElement.get(cmd.NewId));\n            } else if(isSetTextNodeValue(cmd)) {\n                (idToElement.get(cmd.Id) as Text).textContent = cmd.Text;\n            } else if(isInsertBefore(cmd)) {\n                idToElement.get(cmd.ParentId).insertBefore(idToElement.get(cmd.NewId), idToElement.get(cmd.BeforeId));\n            } else if(isRemoveChild(cmd)) {\n                const childToRemove = idToElement.get(cmd.ChildId);\n                if(childToRemove instanceof HTMLElement) {\n                    // remove all child from map to prevent memory leak.\n                    for(const child of childToRemove.querySelectorAll(\"*\")) {\n                        var id = elementToId.get(child);\n                        idToElement.delete(id);\n                        elementToId.delete(child);\n                    }\n                }\n                idToElement[cmd.ParentId].removeChild(childToRemove);\n            }\n        });\n    }\n});\n\n// const connection = new signalR.HubConnectionBuilder()\n//     .withUrl(\"/exprazorhub\")\n//     .withAutomaticReconnect()\n//     .build();\n\n// const idToElement: Map<Id, Node> = new Map();\n// const elementToId : Map<Node, Id> = new Map();\n\n// const MOUNT_ID = -1;\n// idToElement[MOUNT_ID] = document.querySelector(\"body\");\n// elementToId[idToElement[MOUNT_ID]] = MOUNT_ID;\n\n// connection.on(\"handleCommands\", (commands) => {\n//     commands.forEach(cmd => {\n//         if (isSetStringAttribute(cmd)) {\n//             (idToElement.get(cmd.Id) as HTMLElement).setAttribute(cmd.Key, cmd.Value);\n//         } else if (isSetNumberAttribute(cmd)) {\n//             (idToElement.get(cmd.Id) as HTMLElement).setAttribute(cmd.Key, cmd.Value.toString());\n//         } else if (isSetBooleanAttribute(cmd)) {\n//             if (cmd.Value) {\n//                 (idToElement.get(cmd.Id) as HTMLElement).setAttribute(cmd.Key, \"\");\n//             } else {\n//                 (idToElement.get(cmd.Id) as HTMLElement).removeAttribute(cmd.Key);\n//             }\n//         } else if (isRemoveAttribute(cmd)) {\n//             (idToElement.get(cmd.Id) as HTMLElement).removeAttribute(cmd.Key);\n//         } else if (isSetVoidCallback(cmd)) {\n//             switch (cmd.Key) {\n//                 // Only support void callback for now.\n//                 default:\n//                     idToElement.get(cmd.Id)[cmd.Key] = connection.send(\"InvokeVoid\", cmd.Id, cmd.Key);\n//                     break;\n//             }\n//         } else if (isRemoveCallback(cmd)) {\n//             idToElement.get(cmd.Id)[cmd.Key] = null;\n//         } else if (isCreateTextNode(cmd)) {\n//             const newNode = document.createTextNode(cmd.Text);\n//             idToElement.set(cmd.Id, newNode);\n//             elementToId.set(newNode, cmd.Id);\n//         } else if (isCreateElement(cmd)) {\n//             const newNode = document.createElement(cmd.Tag);\n//             idToElement.set(cmd.Id, newNode);\n//             elementToId.set(newNode, cmd.Id);\n//         } else if (isAppendChild(cmd)) {\n//             idToElement.get(cmd.ParentId).appendChild(idToElement.get(cmd.NewId));\n//         } else if(isSetTextNodeValue(cmd)) {\n//             (idToElement.get(cmd.Id) as Text).textContent = cmd.Text;\n//         } else if(isInsertBefore(cmd)) {\n//             idToElement.get(cmd.ParentId).insertBefore(idToElement.get(cmd.NewId), idToElement.get(cmd.BeforeId));\n//         } else if(isRemoveChild(cmd)) {\n//             const childToRemove = idToElement.get(cmd.ChildId);\n//             if(childToRemove instanceof HTMLElement) {\n//                 // remove all child from map to prevent memory leak.\n//                 for(const child of childToRemove.querySelectorAll(\"*\")) {\n//                     var id = elementToId.get(child);\n//                     idToElement.delete(id);\n//                     elementToId.delete(child);\n//                 }\n//             }\n//             idToElement[cmd.ParentId].removeChild(childToRemove);\n//         }\n//     });\n// });"],
  "mappings": "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",
  "names": []
}
